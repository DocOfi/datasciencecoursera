evaluate(function(x) {x + 1}, 6)
q()
library(swirl)
ls(list=ls())
rm(list=ls())
swirl()
q()
library(swirl)
ls()
rm(list=ls())
swirl()
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(dat)]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Happy Birthday!")
submit()
submit()
submit()
mad_libs("London", "a hundred", "monument")
View(telegram)
View(mad_libs)
View(telegram)
View(mad_libs)
View(boring_function)
View(evaluate)
View(mad_libs)
View(mad_libs)
View(my_mean)
View(remainder)
View(telegram)
submit()
"I love" %p% ", R"
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
viewinfo(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags, class)
cls_vect
class(cls_vect)
sum(flags$orange)
flag_colors <-flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
viewinfo(flags)
viewinfo()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
q()
library(swirl)
ls()
rm(list=ls())
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0, 1), 100, replacement = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0, 1), 100, replacement = FALSE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replacement = FALSE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = FALSE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips[1])
sum(flips)
?rbinom
rbinom()
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(0, 1, size = 100, prob = 0.7)
flips2 <- rbinom(0, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
rnorm()
?rnorm
rnorm(10)
rnorm(100, mean =100
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, lambda = 10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colmeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
q()
library(swirl)
ls()
rm(list = ls())
swirl()
d1<- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time(t1))
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(t2)
str(unclass(t2))
t2$min
weekdays(d1)
month(d1)
months(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3,"%B %d, %Y %H:%M")
t4 <- strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), ti, units = days)
difftime(Sys.time(), t1, units = days)
difftime(Sys.time(), t1, units = 'days')
library(cars)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x =sars$speed, cars$dist)
plot(x =cars$speed, y = cars$dist)
plot(x = cars$distance, y = cars$speed)
plot(x = cars$dist, y = cars$speed)
plot(x = speed, y = cars$dist)
plot(x = car$speed = speed, y = car$dist)
skip()
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
?plot
plot(x = cars$speed, main = "My Plot", y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
?plot
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(mpg ~ cyl)
boxplot(formula = mpg ~ cyl)
boxplot(formula = mpg ~ cyl)
boxplot(formula = MPG ~ cyl)
boxplot(formula = Mpg ~ cyl)
skip()
hist(mtcars$mpg)
0
1
getwd
q()
complete5("specdata", 1)
q()
q()
library(datasets)
data(mtcars)
mtcars
read.table
?read.table()
subset
?subset()
q()
library(swirl)
ls
ls()
rm(list=ls())
swirl()
library(cars)
data(cars)
?cars
head(cars)
plot(cars)
plot(cars)
plot(cars)
plot(cars)
?plot()
?plot
plot(x - cars$speed, cars$dist)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(x = speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
Q()
q()
source('~/.active-rstudio-document')
source('C:/Users/Ed/Desktop/Programming Assignment 1/plusFunctions.R')
is.function(plusFunctions)
is.primitive(plusFunctions)
is.function(sum)
is.primitive(sum)
arg <- lapply(funs, formals) ## get formals
objs <- mget(ls("package:base"), inherits = TRUE)
funs <- Filter(is.function, objs)
arg <- lapply(funs, formals) ## get formals
counts <- sapply(arg, length) ## count formals
maxcount <- which.max(counts) ## find most args
maxcount
zeros <- which(counts == 0) ## no args
zeros
q()
?is.element
?sprintf
?'<<-'
q()
q()
q()
x <- rnorm(100)
y <- ifelse (x > 0, 1, -1)
y
z <- ifelse (x > 0, 1, ifelse(x < 0, -1, 0))
z
?floor()
floor(1)
ceiling(1)
floor(10)
ceiling(10)
ceiling(1, 2)
x <- 1, 2
x <- c(1, 2)
floor(x)
ceiling(x)
?runif()
runif(1, 0, 4)
x <- letters[floor(1 + runif(1, 0, 4))]
x
y <- switch(x, a = 'Bonjour', b = 'Guten Tag', c = 'Hello', d = 'Konnichi wa',)
y
f <- function (...){ query <- paste(...) con <- dbConnect(dDriver("SQLite")) dbgetQuery*con, query) dbDisconnect(con)}
?aggregate()
?do.call()
?switch()
?read.table()
?merge()
?seq()
?ave()
?tolower()
q()
outcome_data <- structure(list(hospital = c( "abc hosp", "bcd hosp", "mno hosp", "wxy hosp", "def hosp", "lmn hosp", "uvw hosp", "xyz hosp", "zzz hosp"), state = c("WA", "WA", "WA", "WA", "WY", "WY", "WY", "WY", "WY"), rate = c(10L, 5L, 8L, 10L, 6L, 7L, 9L, 5L, 3L)), .Names = c("hospital"n/ n/, "state", "rate"), row.names = c(3L, 1L, 2L, 4L, 6L, 7L, 8L, 5L, 9L), class = "data.frame")
outcome_data <- structure(list(hospital = c( "abc hosp", "bcd hosp", "mno hosp", "wxy hosp", "def hosp", "lmn hosp", "uvw hosp", "xyz hosp", "zzz hosp"), state = c("WA", "WA", "WA", "WA", "WY", "WY", "WY", "WY", "WY"), rate = c(10L, 5L, 8L, 10L, 6L, 7L, 9L, 5L, 3L)), .Names = c("hospital", "state", "rate"), row.names = c(3L, 1L, 2L, 4L, 6L, 7L, 8L, 5L, 9L), class = "data.frame")
outcome_data
tmp <- outcome_data[order(outcome_data[,2], outcome_data[,3], outcome_data[,1],]
tmp <- outcome_data[order(outcome_data[,2], outcome_data[,3], outcome_data[,1]),]
tmp
tmp$rank <- with(tmp, ave(state, state, FUN = seq_along()))
tmp$rank <- with(tmp, ave(state, state, FUN = seq_along))
temp
tmp
tmp[tmp[, 'rank'] == num, ]
num <- 1
tmp[tmp[, 'rank'] == num, ]
tmp <- outcome_data[order(outcome_data[,2], outcome_data[,3], outcome_data[,1],decreasing = TRUE), ]
tmp[tmp[, 'rank'] == num, ]
tmp
tmp <- outcome_data[order(outcome_data[,2], outcome_data[,3], outcome_data[,1],decreasing = TRUE), ]
tmp$rank <- with(tmp, ave(state, state, FUN = seq_along))
tmp[tmp[, 'rank'] == num, ]
tmp <- outcome_data[order(outcome_data[,2], -outcome_data[,3], outcome_data[,1],decreasing = TRUE), ]
tmp$rank <- with(tmp, ave(state, state, FUN = seq_along))
tmp[tmp[, 'rank'] == num, ]
tmp <- outcome_data[order(outcome_data[,2], outcome_data[,3], outcome_data[,1],]
tmp <- outcome_data[order(outcome_data[,2], outcome_data[,3], outcome_data[,1]),]
num <- 3
tmp[tmp[, 'rank'] == num, ]
tmp$rank <- with(tmp, ave(state, state, FUN = seq_along))
num <- 3
tmp[tmp[, 'rank'] == num, ]
num <- 2
tmp[tmp[, 'rank'] == num, ]
tmp <- outcome_data[order(outcome_data[,2], outcome_data[,3], outcome_data[,1],decreasing = TRUE), ]
tmp
tmp$rank <- with(tmp, ave(state, state, FUN = seq_along))
tmp
tmp <- outcome_data[order(outcome_data[,2], -outcome_data[,3], outcome_data[,1],decreasing = TRUE), ]
tmp
tmp$rank <- with(tmp, ave(state, state, FUN = seq_along))
tmp
tmp <- outcome_data[order(outcome_data[,2], -outcome_data[,3], outcome_data[,1]), ]
tmp$rank <- with(tmp, ave(state, state, FUN = seq_along))
tmp
num <- 1
tmp[tmp[, 'rank'] == num, ]
tmp <- outcome_data[order(outcome_data[,2], -outcome_data[,3], outcome_data[,1]), ]
tmp
q()
q()
install.packages("rJava")
if(!file.exists("data")){dir.create("data")}
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="cameras.csv",method="curl")
dateDownloaded <- date()
dateDownloaded
cameraData <- read.table("./data/cameras.csv")
cameraData <- read.table("./data/cameras.csv",sep=",",header=TRUE)
cameraData <- read.csv("./data/cameras.csv")
download.file(fileUrl,destfile="./data/cameras.xlsx")
library(xlsx)
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre7')
library(xlsx)
install.packages("rjava")
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre7')
install.packages("rjava")
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre7')
install.packages("rjava")
install.packages("rJava")
library(xlsx)
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre7')
install.packages("rJava")
library(xlsx)
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre7')
library(xlsx)
install.packages("rJava")
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre7')
library(xlsx)
q()
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre7')
library(xlsx)
q()
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre7')
library(xlsx)
library(XLConnect)
install.packages("rJava")
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre7')
library(xlsx)
install.packages('rJava', .libPaths()[1], 'http://www.rforge.net/')
install.packages('rJava', .libPaths()[1], 'http://www.rforge.net/')
library(xlsx)
q()
Sys.setenv(JAVA_HOME='C:\\Program Files\Java\ jre1.8.0_51\ bin\ client\ jvm.dll
Sys.setenv(JAVA_HOME='C:\\Program Files\java\ jre1.8.0_51\ bin\ client\ jvm.dll
Sys.setenv(JAVA_HOME='C:\\Program Files\Java\ jre1.8.0_51\ bin\ client\ jvm.dll
Sys.setenv(JAVA_HOME='C:\\Program Files\Java\jre1.8.0_51\bin\client\jvm.dll
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre1.8.0_51')
library(xlsx)
install.packages("rJava")
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre1.8.0_51')
library(xlsx)
Sys.setenv(JAVA_HOME='C:\\Program Files\Java\jre1.8.0_51\bin\client')
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_51\\bin\\client')
library(xlsx)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_51\\bin\\client')
q()
library(data.table)
DF <- data.frame(x=1;3, y=4;6, z=7:9)
DF <- data.frame(x=1:3, y=4:6, z=7:9)
DT <- data.table(x=1:3, y=4:6, z=7:9)
DF[c(2,3)]
DT[c(2,3)]
DF
DT
DT[c(2,3), ]
DF[c(2,3), ]
DF[ ,c(2,3)]
DT[ , c(2,3)]
View(cars)
q()
q()
q()
dir()
q()
getwd
getwd()
dir()
setwd("C:/Users/Ed/datasciencecoursera")
dir()
load("C:/Users/Ed/datasciencecoursera/courses/03_GettingData/02_05_readingFromOtherSources/data/cameras.rda")
load("C:/Users/Ed/datasciencecoursera/courses/03_GettingData/02_05_readingFromOtherSources/data/cameras.rda")
swirl()
library(swirl)
ls()
rm(list=ls())
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm(mydf)
rm("mydf")
cran
?group_by()
?group_by()
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
?n_distinct
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(desc(top_counts, count))
top_counts_sorted <- arrange(top_counts, desc(count))
view(top_counts)
View(top_counts)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, count > 465)
top_unique <- filter(pack_sum, unique() > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
arrange(top_unique, desc(unique))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
?chain
submit()
View(result3)
submit()
source('C:/Users/Ed/AppData/Local/Temp/RtmpKAV1ZL/chain1.R')
submit()
submit()
submit()
submit()
submit()
swirl()
swirl()
q()
q()
