set.seed(123)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training)
dim(testing)
qplot(Petal.Width,Sepal.Width,colour=Species,data=training)
modFit <- train(Species ~ .,method="rpart",data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
summary(modFit)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
inTrain <- createDataPartition(y = segmentationOriginal$Case, p = 0.7, list = FALSE)
training <- segmentationOriginal[inTrain, ]
testing <- segmentationOriginal[-inTrain, ]
dim(training)
dim(testing)
modelFit <- train(Case ~ ., method = "rpart", data = training)
modelFit$finalModel
plot(modelFit$finalModel, uniform = TRUE, main ="Classification Tree")
text(modelFit$finalModel, use.n = TRUE, all = TRUE, cex = 1)
set.seed(125)
> inTrain <- createDataPartition(y = segmentationOriginal$Case, p = 0.75, list = FALSE)
inTrain <- createDataPartition(y = segmentationOriginal$Case, p = 0.75, list = FALSE)
training <- segmentationOriginal[inTrain, ]
testing <- segmentationOriginal[-inTrain, ]
modelFit <- train(Case ~ ., method = "rpart", data = training)
modelFit$finalModel
library(pgmm)
data(olive)
olive <- olive[,-1]
rm(olive)
dim(olive)
data(olive)
dim(olive)
olive <- olive[,-1]
dim(olive)
names(olive)
inTrain <- createDataPartition(y = Area, p = 0.6, method = "rpart", data = olive)
inTrain <- createDataPartition(y = Area ~ ., p = 0.6, method = "rpart", data = olive)
inTrain <- createDataPartition(y = Area ~ ., p = 0.6, data = olive)
inTrain <- createDataPartition(y = Area ~ ., p = 0.6, list = FALSE)
inTrain <- createDataPartition(y = olive$Area, p = 0.75, list = FALSE)
training <- olive[inTrain, ]
testing <- olive[-inTrain, ]
modOlive <- train(Area ~ ., methhod = "rpart", data = olive)
newdata = as.data.frame(t(colMeans(olive)))
newdata
predict(modolive, newdata = newdata)
predict(modOlive, newdata = newdata)
class(olive$Area)
summary(olive$Area)
?olive
head(olive)
summary(olive)
colMeans(olive)
t(colMeans(olive))
class(t(colMeans(olive)))
class(colMeans(olive))
as.data.frame(t(colMeans(olive)))
head(olive)
?t
q()
library(pgmm)
data(olive)
summary(olive)
olive <- olive[,-1]
dim(olive)
inTrain <- createDataPartition(y = olive$Area, p = 0.75, list = FALSE)
library(caret)
inTrain <- createDataPartition(y = olive$Area, p = 0.75, list = FALSE)
training <- olive[inTrain, ]
testing <- olive[-inTrain, ]
modOlive <- train(Area ~ ., methhod = "rpart", data = olive)
newdata = as.data.frame(t(colMeans(olive)))
newdata
predict(modOlive, newdata = newdata)
?tree
??tree
library(party)
?ctree
tree_command <- ctree(Area ~ ., data = olive)
tree_command
plot(tree_command)
predict(treering, newdata = newdata)
predict(tree_command, newdata = newdata)
class(olive)
tree_command$fit
tree_command$predict
treebag_olive <- train(Area ~ ., methhod = "treebag", data = olive)
treebag_olive
treebag_olive$finalModel
treebag_olive$pred
treebag_olive$fit
treebag_olive$aggregate
predict(treebag_olive, newdata = newdata)
q()
library(pgmm)
data(olive)
bagearth_olive <- train(Area ~ ., methhod = "bagEarth", data = olive)
library(caret)
bagearth_olive <- train(Area ~ ., methhod = "bagEarth", data = olive)
bagearth_olive
olive <- olive[,-1]
bagearth_olive <- train(Area ~ ., methhod = "bagEarth", data = olive)
bagearth_olive
bagearth_olive$finalModel
bagearth_olive$pred
newdata = as.data.frame(t(colMeans(olive)))
predict(bagearth_olive, newdata = newdata)
bagfda_olive <- train(Area ~ ., methhod = "bagFDA", data = olive)
bagfda_olive
bagfda_olive$finalModel
predict(bagfda_olive, newdata = newdata)
plot(bagfda_olive)
plot(bagearth_olive)
library(AppliedPredictiveModeling)
data("segmentationOriginal")
library(caret)
intrain <- createDataPartition(y = segmentationOriginal$Case, p = 0.7, list = FALSE)
training <- segmentationOriginal[intrain, ]
testing <- segmentationOriginal[-intrain, ]
rm(intrain, training, testing)
set.seed(125)
intrain <- createDataPartition(y = segmentationOriginal$Case, p = 0.7, list = FALSE)
training <- segmentationOriginal[intrain, ]
testing <- segmentationOriginal[-intrain, ]
dim(training)
dim(testing)
modelFit <- train(Case ~ ., method = "rpart", data = training)
modelFit
modelFit$finalModel
plot(modelFit$finalModel, uniform = TRUE, main ="Classification Tree")
text(modelFit$finalModel, use.n = TRUE, all = TRUE, cex = 1)
install.packages("rpart.plot")
library(AppliedPredictiveModeling)
data("segmentationOriginal")
library(caret)
table(segmentationOriginal$Case)
Case_Train <- segmentationOriginal$Case == "Train"
Case_test <- segmentationOriginal$Case == "Test"
dim(Case_Train)
training <- segmentationOriginal[Case_Train, ]
testing <- segmentationOriginal[Case_test]
testing <- segmentationOriginal[Case_test,]
summary(segmentationOriginal[, 1:6])
summary(segmentationOriginal)
set.seed(125)
CART_Model<-train(Class ~ ., data = Case_Train, method = "rpart")
CART_Model<-train(Class ~ ., data = training, method = "rpart")
CART_Model
CART_Model$finalModel
plot(CART_Model)
plot(CART_Model$finalModel, uniform = TRUE, main ="Classification Tree")
text(modelFit$finalModel, use.n = TRUE, all = TRUE, cex = 1)
text(CART_Model$finalModel, use.n = TRUE, all = TRUE, cex = 1)
library(rattle)
library(rpart.plot)
fancyRpartPlot(CART_Model$finalModel)
install.packages("rattle")
library(rattle)
library(rattle)
fancyRpartPlot(CART_Model$finalModel)
library(ElemStatLearn)
data("SAheart")
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
library(caret)
dim(SAheart)
head(SAheart)
heart_fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = SAheart, method = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, predict(heart_fit, newdata = testSA))
missClass(trainSA$chd, predict(heart_fit, newdata = trainSA))
set.seed(13234)
heart_fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = "glm", family = "binomial")
heart_fit
heart_fit$finalModel
missClass(trainSA$chd, predict(heart_fit, newdata = trainSA))
missClass(testSA$chd, predict(heart_fit, newdata = testSA))
library(ElemStatLearn)
data("vowel.train")
data("vowel.test")
dim(vowel.train)
dim(vowel.test)
head(vowel.train)
head(vowel.test)
summary(vowel.train)
summary(vowel.test)
vowel.train$y <- as.factor
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
rainForest_fit <-train(y ~ ., method = "rf", data=vowel.train)
library(caret)
rainForest_fit <-train(y ~ ., method = "rf", data=vowel.train)
varImp(rainForest_fit)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
q()
library(pgmm)
data(olive)
olive_minus1 <- olive[, -1]
inTrain <- createDataPartition(y = olive$Area, p = 0.75, list = FALSE)
library(caret)
inTrain <- createDataPartition(y = olive$Area, p = 0.75, list = FALSE)
training <- olive[inTrain, ]
testing <- olive[-inTrain, ]
modOlive <- train(Area ~ ., methhod = "rpart", data = olive)
modOlive$finalModel
plot(modOlive$finalModel)
plot(modOlive)
modOlive <- train(Area ~ ., methhod = "rpart", data = olive_minus1)
modOlive
modOlive$finalModel
plot(modOlive$finalModel)
plot(modOlive)
library(AppliedPredictiveModeling)
data("segmentationOriginal")
?segmentationOriginal
library(ElemStatLearn)
data("SAheart")
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
dim(trainSA)
dim(testPlatformEquivalence())
dim(testSA
dim(testSA)
dim(trainSA)[1]
dim(trainSA)[1]/2
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
set.seed(13234)
heart_fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = "glm", family = "binomial")
library(caret)
heart_fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = "glm", family = "binomial")
heart_fit
> set.seed(13234)
set.seed(13234)
heart_fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = "glm", family = "binomial")
class(SAheart)
sapply(SAheart, class)
SAheart$chd <- as.factor(SAheart$chd)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
heart_fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = "glm", family = "binomial")
heart_fit
heart_fit$finalModel
missClass(trainSA$chd, predict(heart_fit, newdata = trainSA))
missClass(testSA$chd, predict(heart_fit, newdata = testSA))
data("SAheart")
sapply(SAheart, class)
set.seed(13234)
heart_fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = "glm", family = "binomial")
missClass(trainSA$chd, predict(heart_fit, newdata = trainSA))
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
heart_fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = "glm", family = "binomial")
missClass(trainSA$chd, predict(heart_fit, newdata = trainSA))
predict(heart_fit, newdata = trainSA)
predict(heart_fit, newdata = trainSA) > 0.5
(predict(heart_fit, newdata = trainSA) > 0.5)*1
sum((predict(heart_fit, newdata = trainSA) > 0.5)*1)
heart_fit
trainSA$chd
sum(trainSA$chd)
sum((predict(heart_fit, newdata = trainSA) > 0.5)*1) != trainSA$chd
sum((predict(heart_fit, newdata = trainSA) > 0.5)*1) != trainSA$chd/length(trainSA$chd)
testSA$chd
predict(heart_fit, newdata = trainSA)
predict(heart_fit, newdata = trainSA) > 0.5
(predict(heart_fit, newdata = trainSA) > 0.5)*1
sum((predict(heart_fit, newdata = trainSA) > 0.5)*1)
sum((predict(heart_fit, newdata = trainSA) > 0.5)*1) != testSA$chd
(sum((predict(heart_fit, newdata = trainSA) > 0.5)*1) != trainSA$chd)/length(trainSA$chd)
(sum((predict(heart_fit, newdata = trainSA) > 0.5)*1) != trainSA$chd)
(sum((predict(heart_fit, newdata = trainSA) > 0.5)*1) != trainSA$chd)/length(trainSA$chd)
testSA$chd
predict(heart_fit, newdata = trainSA)
predict(heart_fit, newdata = trainSA)
predict(heart_fit, newdata = trainSA) > 0.5
(predict(heart_fit, newdata = trainSA) > 0.5)*1
sum((predict(heart_fit, newdata = trainSA) > 0.5)*1) != testSA$chd
(sum((predict(heart_fit, newdata = trainSA) > 0.5)*1) != trainSA$chd)/length(trainSA$chd)
(sum((predict(heart_fit, newdata = trainSA) > 0.5)*1) != trainSA$chd)
(sum((predict(heart_fit, newdata = trainSA) > 0.5)*1) != trainSA$chd)/length(trainSA$chd)
length(trainSA$chd)
(predict(heart_fit, newdata = testSA) > 0.5)*1
(predict(heart_fit, newdata = testSA) > 0.5)*1 != trainSA$chd
sum((predict(heart_fit, newdata = testSA) > 0.5)*1 != trainSA$chd)
sum((predict(heart_fit, newdata = testSA) > 0.5)*1 != trainSA$chd)/length(trainSA$chd)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
set.seed(33833)
r_forest <- train(y ~ ., method="rf", data=vowel.train)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
library(caret)
r_forest <- train(y ~ ., method="rf", data=vowel.train)
varImp(r_forest, scale = FALSE)
predict(r_forest, vowel.test)
confusionMatrix(vowel.test$y, predict(r_forest, vowel.test))
set.seed(33833)
r_forest <- train(y ~ ., method="rf", data=vowel.train)
varImp(r_forest, scale = FALSE)
q()
library(AppliedPredictiveModeling)
data("concrete")
library(caret)
set.seed(1000)
inTrain <- createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training <- mixtures[inTrain, ]
testing <- mixtures[-inTrain, ]
library(Hmisc)
training$index <- 1:nrow(training)
qplot(index, CompressiveStrength,data=training) + geom_smooth(method = "lm", formula = y~x)
qplot(index, CompressiveStrength,colour= cut2(training$Cement, g=4),data=training) + geom_smooth(method = "lm", formula = y~x)
qplot(Cement, CompressiveStrength,colour=cut2(training$BlastFurnaceSlag, g=4),data=training) + geom_smooth(method = "lm", formula = y~x)
qplot(Cement, CompressiveStrength,colour=cut2(training$FlyAsh, g=4),data=training) + geom_smooth(method = "lm", formula = y~x)
qplot(Cement, CompressiveStrength,colour=cut2(training$Water, g=4),data=training) + geom_smooth(method = "lm", formula = y~x)
qplot(Cement, CompressiveStrength,colour=cut2(training$Superplasticizer, g=4),data=training) + geom_smooth(method = "lm", formula = y~x)
qplot(Cement, CompressiveStrength,colour=cut2(training$CoarseAggregate, g=4),data=training) + geom_smooth(method = "lm", formula = y~x)
qplot(Cement, CompressiveStrength,colour=cut2(training$FineAggregate, g=4),data=training) + geom_smooth(method = "lm", formula = y~x)
qplot(Cement, CompressiveStrength,colour=cut2(training$Age, g=4),data=training) + geom_smooth(method = "lm", formula = y~x)
lm(CompressiveSrength ~ Cement, data = mixtures)
lm(CompressiveStrength ~ Cement, data = mixtures)
lm(CompressiveStrength ~ Cement + Water, data = mixtures)
cor(mixtures)
cor(mixtures)
mod1 <- lm(CompressiveStrength ~ Cement + Water, data = mixtures)
mod1 <- lm(CompressiveStrength ~ Cement, data = mixtures)
mod2 <- lm(CompressiveStrength ~ Cement + Water, data = mixtures)
mod3 <- lm(CompressiveStrength ~ Cement + Water + Age, data = mixtures)
mod3 <- lm(CompressiveStrength ~ Cement + Water + Age + Superplaticizer, data = mixtures)
mod3 <- lm(CompressiveStrength ~ Cement + Water + Age + Superplasticizer, data = mixtures)
mod3 <- lm(CompressiveStrength ~ Cement + Water + Age, data = mixtures)
mod4 <- lm(CompressiveStrength ~ Cement + Water + Age + Superplasticizer, data = mixtures)
mod5 <- lm(CompressiveStrength ~ Cement + Water + Age + Superplasticizer + CoarseAggregate, data = mixtures)
mod5 <- lm(CompressiveStrength ~ Cement + Water + Age + Superplasticizer + CoarseAggregate + FineAggregate, data = mixtures)
mod5 <- lm(CompressiveStrength ~ Cement + Water + Age + Superplasticizer + CoarseAggregate, data = mixtures)
mod6 <- lm(CompressiveStrength ~ Cement + Water + Age + Superplasticizer + CoarseAggregate + FineAggregate, data = mixtures)
mod7 <- lm(CompressiveStrength ~ Cement + Water + Age + Superplasticizer + CoarseAggregate + FineAggregate + FlyAsh, data = mixtures)
mod8 <- lm(CompressiveStrength ~ Cement + Water + Age + Superplasticizer + CoarseAggregate + FineAggregate + FlyAsh + BlastFurnacelag, data = mixtures)
mod8 <- lm(CompressiveStrength ~ Cement + Water + Age + Superplasticizer + CoarseAggregate + FineAggregate + FlyAsh + BlastFurnaceSlag, data = mixtures)
> mod5 <- lm(CompressiveStrength ~ Cement + Water + Age + Superplasticizer + CoarseAggregate, data = mixtures)
mod5 <- lm(CompressiveStrength ~ Cement + Water + Age + Superplasticizer + CoarseAggregate, data = mixtures)
mod1
summary(mod1)
summary(mod2)
summary(mod3)
summary(mod4)
summary(mod5)
summary(mod6)
summary(mod7)
summary(mod8)
anova(mod1, mod2, mod3, mod4, mod5, mod6, mod7, mod8)
mod2a <- lm(CompressiveStrength ~ Cement + Water + Cement:Water, data = mixtures)
summary(mod2a)
mod3a <- lm(CompressiveStrength ~ Cement + Water + Age + Cement:Water, data = mixtures)
summary(mod3a)
mod3a2 <- lm(CompressiveStrength ~ Cement + Water + Age + Cement:Water, Cement:Age, data = mixtures)
summary(model3a2)
summary(mod3a2)
anova(mod3, mod3a)
anova(mod2, mod2a)
mod4 <- lm(CompressiveStrength ~ Cement + Water + Age + Superplasticizer, data = mixtures)
mod4a <- lm(CompressiveStrength ~ Cement + Water + Age + Superplasticizer + Cement:Water, data = mixtures)
summary(mod4)
summary(mod4a)
anova(mod4, mod4a)
mod4a2 <- lm(CompressiveStrength ~ Cement + Water + Age + Superplasticizer + Cement:Water + Cement:Age, data = mixtures)
summary(mod4a2)
anova(mod4, mod4a, mod4a2)
mod5 <- lm(formula = CompressiveStrength ~ Cement + Water + Age + Superplasticizer +
CoarseAggregate, data = mixtures)
mod5a <- lm(formula = CompressiveStrength ~ Cement + Water + Age + Superplasticizer +
CoarseAggregate + Cement:Water, data = mixtures)
mod5a2 <- lm(formula = CompressiveStrength ~ Cement + Water + Age + Superplasticizer +
CoarseAggregate + Cement:Water + cement:Age, data = mixtures)
mod5a2 <- lm(formula = CompressiveStrength ~ Cement + Water + Age + Superplasticizer +
CoarseAggregate + Cement:Water + Cement:Age, data = mixtures)
summary(mod5)
summary(mod5a)
summary(mod5a2)
anova(mod5, mod5a, mod5a2)
mod7a <- lm(CompressiveStrength ~ Cement + Water + Age + Superplasticizer + CoarseAggregate + FineAggregate + FlyAsh + Cement:Water, data = mixtures)
mod7a2 <- lm(CompressiveStrength ~ Cement + Water + Age + Superplasticizer + CoarseAggregate + FineAggregate + FlyAsh + Cement:Water + Cement:Age, data = mixtures)
summary(mod7)
summary(mod7a)
summary(mod7a2)
anova(mod7,mod7a, mod7a2)
mod7a1 <- lm(CompressiveStrength ~ Cement + Water + Age + Superplasticizer + CoarseAggregate + FineAggregate + FlyAsh + Cement:Age, data = mixtures)
summary(mod7a1)
anova(mod7,mod7a1, mod7a2)
plot(mod7a1)
summary(mod1)
summary(mod7)
mod_cem <- lm(formula = CompressiveStrength ~ Cement, data = mixtures)
mod_wat <- lm(formula = CompressiveStrength ~ Water, data = mixtures)
mod_age <- lm(formula = CompressiveStrength ~ Age, data = mixtures)
mod_sup <- lm(formula = CompressiveStrength ~ Superplasticizer, data = mixtures)
mod_cagg <- lm(formula = CompressiveStrength ~ CoarseAggregate, data = mixtures)
mod_fagg <- lm(formula = CompressiveStrength ~ FineAggregate, data = mixtures)
mod_fly <- lm(formula = CompressiveStrength ~ FlyAsh, data = mixtures)
summary(mod_cem)
summary(mod_wat)
summary(mod_age)
summary(mod_sup)
summary(mod_cagg)
summary(mod_fagg)
summary(mod_fly)
mod_blast <- lm(formula = CompressiveStrength ~ BlastFurnaceSlag, data = mixtures)
summary(mod_blast)
mod7a2 <- lm(CompressiveStrength ~ Cement + Water + Age + Superplasticizer + CoarseAggregate + FineAggregate + FlyAsh + Cement:Age + Cement:Water, data = mixtures)
anova(mod7,mod7a1, mod7a2)
mod7a1b <- lm(CompressiveStrength ~ Cement + Water + Age + Superplasticizer + CoarseAggregate + FineAggregate + FlyAsh + Cement:Age + Cement:Superplasticizer, data = mixtures)
summary(mod7a1b)
summary(mod7a1b)
anova(mod7a1, mod7a1b)
plot(mod7a1b)
library(car)
ncvTest(mod7a1b)
spreadLevelPlot(mod7a1b)
mod7a1bI <- lm(CompressiveStrength ~ Cement + Water + Age + Superplasticizer + CoarseAggregate + FineAggregate + FlyAsh + Cement:Age + Cement:Superplasticizer + Cement:Water, data = mixtures)
summary(mod7a1bI)
anova(mod7a1b, mod7a1bI)
q()
??randomForest
library(pgmm)
data(olive)
olive_minus1 <- olive[,-1]
modOlive <- train(Area ~ ., method = "rpart", data = olive_minus1)
library(caret)
modOlive <- train(Area ~ ., method = "rpart", data = olive_minus1)
summary(olive_minus1)
mod_olive <- train(Area ~ ., method = "rpart", data = olive_minus1)
modOlive <- train(Area ~ ., methhod = "rpart", data = olive_minus1)
newdata = as.data.frame(t(colMeans(olive)))
modOlive$finalModel
mod_olive$finalModel
newdata = as.data.frame(t(colMeans(olive_minus1)))
predict(modOlive, newdata = newdata)
predict(mod_olive, newdata = newdata)
class(olive_minus1$Area)
olive_minus1$Area <- as.factor(olive_minus1$Area)
mod_olive <- train(Area ~ ., method = "rpart", data = olive_minus1)
modOlive <- train(Area ~ ., methhod = "rpart", data = olive_minus1)
mod_olive$finalModel
modOlive$finalModel
library(rattle)
fancyRpartPlot(mod_olive$finalModel)
fancyRpartPlot(modOlive$finalModel)
plot(modOlive$finalModel)
predict(modOlive, newdata = newdata)
predict(mod_olive, newdata = newdata)
data(olive)
olive_minus1 <- olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
mod_olive <- train(Area ~ ., method = "rpart", data = olive_minus1)
modOlive <- train(Area ~ ., method = "rpart", data = olive_minus1 )
predict(mod_olive, newdata = newdata)
predict(modOlive, newdata = newdata)
fancyRpartPlot(mod_olive$finalModel)
fancyRpartPlot(modOlive$finalModel)
class(olive_minus1$Area)
modOlive <- train(Area ~ ., methhod = "rpart", data = olive_minus1 )
mod_olive$finalModel
modOlive$finalModel
predict(modOlive, newdata = newdata)
modOlive <- train(Area ~ ., method = "rpart", data = olive_minus1 )
modOlive$finalModel
predict(modOlive, newdata = newdata)
modOlive <- train(Area ~ ., methhod = "rpart", data = olive_minus1 )
modOlive$finalModel
predict(modOlive, newdata = newdata)
table(olive_minus1$Area)
table(olive_minus1$Area)/length(olive_minus1$Area)
modOlive
mod_olive
library(ElemStatLearn)
?vowel.train
q()
install.packages("ipred")
q()
q()
q()
install.packages("caret")
install.packages("caret")
install.packages("caret")
q()
q()
setwd("C:/Users/Ed/datasciencecoursera/Practical Machine Learning")
q()
